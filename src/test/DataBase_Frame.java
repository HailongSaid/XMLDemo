
package test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import static test.XMLeditor.treeModel;

/**
 *
 * @author Administrator
 */
public class DataBase_Frame extends javax.swing.JFrame {
     String tableName;
     XMLeditor xmleditor;
    public DataBase_Frame(XMLeditor xmleditor){
        super("数据库");
        initComponents();
        this.xmleditor =  xmleditor;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root","root");
            String ss = "show databases";
            statement =  connection.createStatement();
            rs = statement.executeQuery(ss);
            while(rs.next()){
                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(rs.getString(1));
                
                statement1 =  connection.createStatement();
                String ss1 = "use " +rs.getString(1);
                statement1.execute(ss1);
                ss1 = "show tables";
                rs1 = statement1.executeQuery(ss1);
                while(rs1.next()){
                    DefaultMutableTreeNode newNode1 = new DefaultMutableTreeNode(rs1.getString(1));
                    newNode.add(newNode1);
                   
                }
                root.add(newNode);
                jTree1.updateUI();
           }
            connection.close();
        } 
        catch (SQLException ex){
            Logger.getLogger(DataBase_Frame.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex){
            Logger.getLogger(DataBase_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jcboDriver = new javax.swing.JComboBox();
        jcboURL = new javax.swing.JComboBox();
        jtfUsername = new javax.swing.JTextField();
        jlblConnectionStatus = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jpfPassword = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtasqlCommand = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        root = new DefaultMutableTreeNode("数据库名称");
        jTree1 = new javax.swing.JTree(root);
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtaSQLResult = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Database Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel1.setText("JDBC Driver");

        jLabel3.setText("Database URL");

        jLabel4.setText("Username");

        jLabel5.setText("Password");

        jcboDriver.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
            "com.mysql.jdbc.Driver", "sun.jdbc.odbc.JdbcOdbcDriver",
            "oracle.jdbc.driver.OracleDriver"}));
jcboDriver.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcboDriverActionPerformed(evt);
    }
    });

    jcboURL.setModel(new javax.swing.DefaultComboBoxModel(str_c));

    jtfUsername.setText("root");

    jlblConnectionStatus.setText("No connection now");

    jButton1.setText("Connect to Database");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jpfPassword.setText("root");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jlblConnectionStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
            .addGap(9, 9, 9)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
            .addGap(5, 5, 5))
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jtfUsername, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpfPassword, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jcboURL, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcboDriver, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jcboDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(jcboURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel4)
                .addComponent(jtfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel5)
                .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jlblConnectionStatus)
                .addComponent(jButton1)))
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter a SQL Command", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N

    jtasqlCommand.setColumns(20);
    jtasqlCommand.setRows(5);
    jScrollPane1.setViewportView(jtasqlCommand);

    jButton2.setText("Clear");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton3.setText("Execute SQL");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jButton2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3)))
            .addGap(3, 3, 3))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addComponent(jScrollPane1)
            .addGap(4, 4, 4)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton2)
                .addComponent(jButton3)))
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Database File", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N

    jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
        public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
            jTree1ValueChanged(evt);
        }
    });
    jScrollPane2.setViewportView(jTree1);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane2)
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(185, 185, 185))
    );

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SQL Execution Result", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N

    jtaSQLResult.setColumns(20);
    jtaSQLResult.setRows(5);
    jScrollPane3.setViewportView(jtaSQLResult);

    jButton4.setText("Clear Result");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    jButton5.setText("Show Table");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addComponent(jButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton5)
            .addGap(30, 30, 30))
        .addComponent(jScrollPane3)
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton4)
                .addComponent(jButton5)))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void connectToDB() {
    // Get database information from the user input
    String driver = (String)jcboDriver.getSelectedItem();
    String url = (String)jcboURL.getSelectedItem();
    String username = jtfUsername.getText().trim();
    String password = new String(jpfPassword.getPassword());

    // Connection to the database
    try {
      Class.forName(driver);
      connection = DriverManager.getConnection(
        url, username, password);
      jlblConnectionStatus.setText("Connected to " + url);
    }
    catch (java.lang.Exception ex) {
      ex.printStackTrace();
    }
  }
   /** Execute SQL commands */
  private void executeSQL() {
    if (connection == null) {
      jtaSQLResult.setText("Please connect to a database first");
      return;
    }
    else {
      String sqlCommands = jtasqlCommand.getText().trim();
      String[] commands = sqlCommands.replace('\n', ' ').split(";");

      for (String aCommand: commands) {
        if (aCommand.trim().toUpperCase().startsWith("SELECT")) {
          processSQLSelect(aCommand);
        }
        else {
          processSQLNonSelect(aCommand);
        }
      }
    }
  }

  /** Execute SQL SELECT commands */
  private void processSQLSelect(String sqlCommand) {
    try {
      // Get a new statement for the current connection
      statement = connection.createStatement();

      // Execute a SELECT SQL command
      ResultSet resultSet = statement.executeQuery(sqlCommand);

      // Find the number of columns in the result set
      int columnCount = resultSet.getMetaData().getColumnCount();
      String row = "";

      // Display column names
      for (int i = 1; i <= columnCount; i++) {
        row += resultSet.getMetaData().getColumnName(i) + "\t";
      }

      jtaSQLResult.append(row + '\n');

      while (resultSet.next()) {
        // Reset row to empty
        row = "";

        for (int i = 1; i <= columnCount; i++) {
          // A non-String column is converted to a string
          row += resultSet.getString(i) + "\t";
        }

        jtaSQLResult.append(row + '\n');
      }
    }
    catch (SQLException ex) {
      jtaSQLResult.setText(ex.toString());
    }
  }

  /** Execute SQL DDL, and modification commands */
  private void processSQLNonSelect(String sqlCommand) {
    try {
      // Get a new statement for the current connection
      statement = connection.createStatement();

      // Execute a non-SELECT SQL command
      statement.executeUpdate(sqlCommand);

      jtaSQLResult.setText("SQL command executed");
    }
    catch (SQLException ex) {
      jtaSQLResult.setText(ex.toString());
    }
  }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         connectToDB();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        jtaSQLResult.setText(null);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jtasqlCommand.setText(null);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         executeSQL();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jcboDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcboDriverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcboDriverActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        if(node.isLeaf()){
            tableName = node.toString();
        }
        if(root.isNodeChild(node)){
        DefaultMutableTreeNode note = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent(); 
        str_c[0] = str_c1+note.toString().trim();//获得这个结点的名称
        jcboURL.setModel(new javax.swing.DefaultComboBoxModel(str_c));
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        if(node.isLeaf()){
            tableName = node.toString();
            xmleditor.setTitle(tableName);
            SqlToXml();
            showTree();
        }
        else
            JOptionPane.showMessageDialog(null,  "请选择一个表！","提示信息", JOptionPane.INFORMATION_MESSAGE);
           
    }//GEN-LAST:event_jButton5ActionPerformed
    File file;
    String getFile(){
        return file.getAbsolutePath();
    }
    void showTree(){
        try {
              if(xmleditor.jTree1!=null)
                  xmleditor.jTree1.removeAll();
              xmleditor.jTree1 = new XMLTree(file.getAbsolutePath());
              xmleditor.jTree1.setEditable(true);
              xmleditor.rootNode = XMLTree.getRootNode();
              xmleditor.treeModel=new  DefaultTreeModel(xmleditor.rootNode);
              xmleditor.getJScrollPane().setViewportView(xmleditor.jTree1);
              xmleditor.jTree1.updateUI();
              this.setTitle(file.getAbsolutePath());
              
        } catch (IOException ex) {
            Logger.getLogger(XMLeditor.class.getName()).log(Level.SEVERE, null, ex);
        }
         xmleditor.flag = 1;
         xmleditor.filename = file.getAbsolutePath();
        xmleditor.jTree1.addMouseListener(new MyMouseListener());
    }
    void SqlToXml(){
        try {
            
            connectToDB();
            Connection con = connection;
             Statement stat;
             ResultSet rs;
            stat = con.createStatement();
             String ss = "select * from "+tableName;
             rs =  stat.executeQuery(ss);
             ResultSetMetaData data=rs.getMetaData();   
             int n = data.getColumnCount();
             String columnName[] = new String[n];
             int columnType[] = new int[n];
             for(int i =0;i<n;i++){
                 columnName[i] = data.getColumnName(i+1);
                 columnType[i] = data.getColumnType(i+1);
             }
             DocumentBuilderFactory factory=
             DocumentBuilderFactory.newInstance();
             DocumentBuilder domPaser= factory.newDocumentBuilder();
             org.w3c.dom.Document document;
             file = new File(tableName+".xml");
             document= domPaser.newDocument();
             document.setXmlVersion("1.0");
             Element root=document.createElement(tableName); 
             document.appendChild(root); 
             while(rs.next()){
                 String stu[] = new String[n];
                 for(int i=0;i<n;i++){
                     if((columnType[i]==java.sql.Types.INTEGER)||(columnType[i]==java.sql.Types.SMALLINT)
                             ||(columnType[i]==java.sql.Types.BIGINT)||(columnType[i]==java.sql.Types.TINYINT))
                         stu[i] = rs.getInt(i+1)+"";
                     else if((columnType[i]==java.sql.Types.CHAR)||(columnType[i]==java.sql.Types.VARCHAR))
                          stu[i] = rs.getString(i+1)+"";
                     else if(columnType[i]==java.sql.Types.FLOAT)
                          stu[i] = rs.getFloat(i+1)+"";
                     else if(columnType[i]==java.sql.Types.DOUBLE)
                          stu[i] = rs.getDouble(i+1)+"";
                     else if(columnType[i]==java.sql.Types.BOOLEAN)
                          stu[i] = rs.getBoolean(i+1)+"";
                     else if(columnType[i]==java.sql.Types.DATE)
                          stu[i] = rs.getDate(i+1)+"";
                 }
                 Node elementNode = makeNode1(document,stu,columnName);
                 root.appendChild(elementNode);
             }
             TransformerFactory transFactory=TransformerFactory.newInstance();
             Transformer transformer=transFactory.newTransformer();
             DOMSource  domSource=new DOMSource(document); //document为上面java所生成的
             FileOutputStream out=new FileOutputStream(file);
             StreamResult xmlResult=new StreamResult(out);
             transformer.transform(domSource, xmlResult);
             out.close();
             con.close();
         }
         catch (SQLException ex) {

         } catch (ParserConfigurationException ex) {
          Logger.getLogger(DataBase_Frame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (TransformerConfigurationException ex) {
             Logger.getLogger(DataBase_Frame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (FileNotFoundException ex) {
             Logger.getLogger(DataBase_Frame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (TransformerException ex) {
             Logger.getLogger(DataBase_Frame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(DataBase_Frame.class.getName()).log(Level.SEVERE, null, ex);
         }
         
            
    }
     Node makeNode1(org.w3c.dom.Document document,String[] stu,String[] columnName){
       Node elementNode = document.createElement("元组");
       for(int i=0;i<columnName.length;i++){
       Node nodeElement=document.createElement(columnName[i]);
       nodeElement.appendChild(document.createTextNode(stu[i]));
       elementNode.appendChild(nodeElement);
       }
        return elementNode;
      }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree jTree1;
    private javax.swing.JComboBox jcboDriver;
    private javax.swing.JComboBox jcboURL;
    private javax.swing.JLabel jlblConnectionStatus;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JTextArea jtaSQLResult;
    private javax.swing.JTextArea jtasqlCommand;
    private javax.swing.JTextField jtfUsername;
    // End of variables declaration//GEN-END:variables
    private Connection connection;
    private Statement statement,statement1;
    ResultSet rs,rs1;
    DefaultMutableTreeNode root;
    String str_c1 =  "jdbc:mysql://localhost:3306/";
    String str_c[] = str_c = new String[] {
    "jdbc:mysql://localhost:3306/",
    "jdbc:mysql://liang.armstrong.edu/test",
    "jdbc:odbc:exampleMDBDataSource",
    "jdbc:oracle:thin:@liang.armstrong.edu:1521:orcl"};
}
